buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}


ext {
	baseName = "honeymon-blog"
	baseVersion = "0.0.1-SNAPSHOT"
}

configure(allprojects) {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse-wtp'
  apply plugin: 'io.spring.dependency-management' 
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    mavenCentral()
  }
} // and allproject

project(':frontend') {
  sourceSets.main.resources { 
  	srcDirs 'dist' 
  }
	
  jar {
    from "dist"
    includeEmptyDirs = false
  }
	
  clean {
    delete ".tmp"
    delete "dist"
  }
} // end frontend

/**
 * RESTful 하게 만들어봅시다.
 */
project(':backend') {
  apply plugin: 'spring-boot' 
  apply plugin: 'war'
  //see: https://gradle.org/docs/current/userguide/checkstyle_plugin.html
  apply plugin: 'checkstyle'
  //see: https://gradle.org/docs/current/userguide/pmd_plugin.html
  apply plugin: 'pmd'
 
  jar {
	baseName = baseName
	version = baseVersion
  }

  war {
  	baseName = baseName
	version = baseVersion
  }
 
  configurations {
    providedRuntime
    all*.exclude module: 'commons-logging'
  }
	
  dependencies {
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-mustache"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "joda-time:joda-time"
    compile "org.projectlombok:lombok:1.16.6"
    
    runtime "com.h2database:h2"
    runtime	project(':frontend')
    
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test") 
  }
  
  checkstyle {
	  configFile = file("checkstyle.xml")
	  reportsDir = file("${buildDir}/checkstyle-output")
	  ignoreFailures = true
  }

  checkstyleMain {	
	  reports {
		  xml.destination = file("${checkstyle.reportsDir}/checkstyle-report.xml")
	  }
  }

  pmd {
	  ignoreFailures = true
	  reportsDir = file("${buildDir}/pmd-output")
  }

  pmdMain {
	  reports {
		  xml.destination = file("${pmd.reportsDir}/pmd-report.xml")
		  xml.enabled = true
	  }
  }
} //end backend

task wrapper(type: Wrapper) {
  gradleVersion = '2.6'
}
